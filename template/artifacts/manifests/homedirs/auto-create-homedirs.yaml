# Copyright Â© 2024, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: homedir-script
  namespace: {{V4_CFG_NAMESPACE}}
data:
  script: |
    #!/bin/sh
    # home_dir_builder.sh
    #
    # Script that pulls all users from identities/users and then pulls their uid/gid from identities/users//identifier and
    # then creates a home directory in the supplied path named  with ownership matching the uid/gid that is returned.
    # Author: Greg Wootton
    # Date: 11AUG2021

    # Define a "usage" function that explains the syntax.
    function usage {
        echo ""
        echo "Usage: home_dir_builder.sh [OPTIONS]..."
        echo "Script calls /identities/users to get a list of users and then for each one calls"
        echo "/identities/users//identifier to get the uid and gid. It will then create a"
        echo "path in the supplied parent directory named '' with ownership of that uid/gid."
        echo ""
        echo "Options:"
        echo "  --directory, -d     The path where you would like to create the home directories."
        echo "  --url, -u           The URL for the Viya environment."
        echo "  --help, -h          Return this usage information page."
        echo ""
    }

    function jqcheck {
        echo "NOTE: Checking if jq is installed."
        RPMV=$(jq --version)
        RC=$?
        if [ $RC != "0" ]
            then
            echo "NOTE: installing jq"
            apk add jq 2>/dev/null
            apk add curl 2>/dev/null
        fi
        echo "jq is installed, continuing..."
    }

    # If no arguments are supplied, return the help page and terminate with a non-zero return code.
    if [ "$1" = "" ]
        then
        usage
        exit 1
    fi

    # Read in the arguments provided and store them to environment variables.
    while [ "$1" != "" ]
        do
        case $1 in
        -d | --directory )          shift
                                    directory=$1
                                    ;;
        -u | --url )                shift
                                    baseurl=$1
                                    ;;
        -h | --help )               usage
                                    exit
                                    ;;
        * )                         usage
                                    exit 1
        esac
        shift
    done

    jqcheck

    # Confirm we have the values we need
    if [ -z "$directory" ] || [ -z "$baseurl" ]
        then
        echo "ERROR: Both --directory and --url must be specified."
        exit 1
    fi

    # Remove any trailing slashes
    baseurl=${baseurl%/}
    directory=${directory%/}

    # Confirm the directory is a directory and we have permission to write to it.
    if [ ! -d "$directory" ] || [ ! -w "$directory" ]
        then
        echo "ERROR: $directory is not a writeable directory."
    fi

    # Login to Viya
    echo "NOTE: Attempting to log in to $baseurl"
    user="$user"
    pass="$password"
    headers=$(mktemp)
    token=$(curl -k -s -L -X POST "$baseurl/SASLogon/oauth/token" -H 'Accept: application/json' -H 'Content-Type: application/x-www-form-urlencoded' -H 'Authorization: Basic c2FzLmNsaTo=' -d 'grant_type=password' -d "username=$user" -d "password=$pass" -D $headers | sed "s/{.*\"access_token\":\"\([^\"]*\).*}/\1/g")

    # Confirm token successfully acquired.
    rc=$(grep 'HTTP.*200' $headers | wc -l)
    if [ $rc -ne 1 ] || [ -z "$token" ]
        then
            echo "ERROR: Login unsuccessful."
            cat $headers
            rm $headers
            exit 1
    fi

    echo "NOTE: Successfully logged in as $user."

    # Refresh identities cache
    userresp=$(mktemp)
    curl -k -s -L -X POST $baseurl/identities/cache/refreshes -H "Authorization: Bearer $token" -H "Accept: application/json" > $userresp
    echo "NOTE: Refreshing identities cache"
    sleep 20

    # Pull the initial list of users
    userresp=$(mktemp)
    curl -k -s -L $baseurl/identities/users -H "Authorization: Bearer $token" -H "Accept: application/json" > $userresp
    echo "NOTE: Pulling users into file $userresp."
    # Create an array of users
    users=$(jq -r '.items[].id' $userresp)

    # Check for a next link
    nexturl=$(jq -r '.links[] | select(.rel == "next") | .href' $userresp)

    # Iterate through all next links to fully populate the array with user ids.
    while [ ! -z "$nexturl" ]
      do
        curl -k -s -L ${baseurl}${nexturl} -H "Authorization: Bearer $token" -H "Accept: application/json" > $userresp
        users+=$(jq -r '.items[].id' $userresp)
        nexturl=$(jq -r '.links[] | select(.rel == "next") | .href' $userresp)
    done

    # For each user, check to see if a directory already exists with their name in the directory supplied. If not, pull the uid/gid and create the directory.
    for user in ${users}
        do
        if [ ! -d "${directory}/${user}" ]
            then
            curl -k -s -L $baseurl/identities/users/${user}/identifier -H "Authorization: Bearer $token" -H "Accept: application/json" > $userresp
            uid=$(jq -r '.uid' $userresp)
            gid=$(jq -r '.gid' $userresp)
            install -d -m 0700 -o $uid -g $gid ${directory}/${user}
            echo "NOTE: Created directory ${directory}/${user} with ownership ${uid}:${gid}"
            else
            echo "NOTE: Directory ${directory}/${user} appears to already exist. Skipping."
        fi
    done

---
apiVersion: v1
kind: Secret
metadata:
  name: homedir-script-user
  namespace: {{V4_CFG_NAMESPACE}}
type: Opaque
data:
  username: c2FzYm9vdA==
  password: {{SASBOOT_PASS_ENCODED}}
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: homedir-creator
  namespace: {{V4_CFG_NAMESPACE}}
spec:
  schedule: "*/5 * * * *"
  jobTemplate:
   spec:
     template:
      spec:
        containers:
        - image: alpine:3.16.2
          env:
            - name: user
              valueFrom:
                secretKeyRef:
                  name: homedir-script-user
                  key: username
                  optional: false # same as default; "mysecret" must exist
                            # and include a key named "username"
            - name: password
              valueFrom:
                secretKeyRef:
                  name: homedir-script-user
                  key: password
                  optional: false # same as default; "mysecret" must exist
                            # and include a key named "password"
          command: ["/bin/sh"]
          args: ["-c","script -d /mnt/viya-share/homes -u https://{{V4_CFG_INGRESS_FQDN}}"]
          imagePullPolicy: IfNotPresent
          name: homedir-creator
          volumeMounts:
            - mountPath: /mnt/viya-share/homes
              name: nfs-homes
            - mountPath: /usr/local/bin
              name: script
          securityContext:
            allowPrivilegeEscalation: false
            privileged: false
            readOnlyRootFilesystem: true
        restartPolicy: Never
        volumes:
          - name: nfs-homes
            nfs:
             path: /export/{{V4_CFG_NAMESPACE}}/homes
             server: {{NFS_VM_IP}}
          - name: script
            configMap:
             name: homedir-script
             defaultMode: 0755

